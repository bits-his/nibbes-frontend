{
  "role": "user",
  "content": "Build a complete full-stack web application for Nibbes Kitchen‚Äôs Order Management System (OMS). Follow the requirements and architecture below carefully. Do not clone or rewrite the entire repo; only create or update the necessary components to deliver the described functionality.\n\n## üß© Project Goal\nDevelop and deploy an end-to-end Order Management System that automates ordering, payments, and kitchen coordination for both walk-in and online customers.\n\n---\n\n## üöÄ Core Functionalities\n\n### 1. Walk-In Customer Flow\n- Each table or entry point displays a unique QR code.\n- Scanning the QR code opens the digital menu web interface.\n- The customer can browse the menu, select items, specify quantity, and checkout.\n- Payment options: digital transfer (with reference input), POS, or online card payment gateway (e.g., Paystack/Flutterwave).\n- Once payment or order is confirmed, generate an **Order Number** and show it on a **live Order Docket Display**.\n\n### 2. Cashier Flow\n- Cashiers can manually input customer orders (for walk-ins paying cash).\n- Upon confirmation, generate the same type of **Order Number** and print receipts automatically.\n\n### 3. Kitchen & Docket Management\n- Orders are displayed in real time on the **Kitchen Dashboard**.\n- Each order includes item list, quantity, and payment status.\n- Two **thermal printer outputs** are triggered automatically:\n  - One receipt prints at the kitchen.\n  - One receipt prints at the cashier point.\n\n### 4. Online Ordering & Delivery Flow\n- Online customers access the web interface to place orders for delivery.\n- Payment gateway checkout is integrated.\n- Once the order is placed, it appears in the kitchen queue.\n- Delivery riders can be assigned automatically or manually.\n- Rider dashboard includes order pickup confirmation, delivery route, and customer signature/confirmation.\n\n### 5. Notifications & Tracking\n- Customers are notified (SMS/email/web alert) when their order is ready or out for delivery.\n- Admin dashboard shows real-time status of all orders.\n\n---\n\n## üß† Technical Requirements\n\n### Frontend\n- React + TailwindCSS\n- Responsive web interface for both customers and admin/cashier/kitchen users\n- Live docket updates via WebSockets or Firebase real-time database\n\n### Backend\n- Node.js + Express (or Python FastAPI optional)\n- REST + WebSocket endpoints for order, payment, and notification management\n- Database: PostgreSQL or MongoDB\n- Integration with Paystack/Flutterwave for digital payments\n- Integration with printer API (e.g., Epson or Sunmi) for automatic thermal printing\n\n### Admin Dashboard\n- Manage menu (add/edit/delete items, prices, categories)\n- View all orders by status (pending, preparing, ready, delivered)\n- Manage cashier and kitchen users\n- Reporting: daily/weekly sales, top items, revenue by channel\n\n---\n\n## üí∞ Cost Options Display (for proposal integration)\nInclude a simple info page that outlines project options and pricing for demo purposes:\n\n| Option | Description | Development Cost | VAT | Total |\n|--------|--------------|------------------|------|--------|\n| Option 1 | QR + Web Interface | ‚Ç¶4,000,000 | ‚Ç¶300,000 | ‚Ç¶4,300,000 |\n| Option 2 | QR + Chatbot Integration | ‚Ç¶7,000,000 | ‚Ç¶525,000 | ‚Ç¶7,525,000 |\n\n---\n\n## üßæ Expected Modules\n1. **Customer Module:** QR menu, order creation, checkout, notifications.\n2. **Cashier Module:** Manual order entry, payment status, invoice printing.\n3. **Kitchen Module:** Real-time order view, preparation tracking, printing.\n4. **Delivery Module:** Rider assignment, delivery confirmation, tracking.\n5. **Admin Module:** Menu management, users, reports, and configuration.\n\n---\n\n## ‚öôÔ∏è Deployment\n- Host backend on Render, Railway, or AWS EC2\n- Host frontend on Vercel or Netlify\n- Use environment variables for API keys (payment, printer, DB)\n- Enable CI/CD auto-deploy from GitHub repo\n\n---\n\n## üìã Deliverables\n- Complete source code (frontend + backend)\n- Database schema + seed data\n- API documentation (Swagger/OpenAPI)\n- Admin and user manuals (PDF)\n- Deployment scripts (Docker or CI/CD ready)\n\n---\n\n## üß™ Testing Requirements\n- Unit tests for backend endpoints (Jest or Pytest)\n- E2E flow test for customer ordering ‚Üí kitchen printing ‚Üí delivery tracking\n- Manual UAT instructions for cashier, kitchen, and delivery users\n\n---\n\n## üîÑ Additional Features (Future Ready)\n- Option to add **AI chatbot ordering interface** for customers using WhatsApp or website chat widget (OpenAI/Claude integration)\n- Support for **loyalty program** and **discount vouchers**\n- Optional **inventory module** for ingredients tracking\n\n---\n\n## ‚úÖ Build Instruction Summary\n1. Create the required frontend and backend folders.\n2. Implement the described modules incrementally.\n3. Ensure all features work in real time.\n4. Use clean, modular code and comments.\n5. Output step-by-step progress updates and final deployment summary.\n\n---\n\nWhen done, summarize what was built, the architecture used, and deployment URLs (frontend, backend, database)."
}